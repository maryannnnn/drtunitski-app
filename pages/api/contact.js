import fs from 'fs';
import path from 'path';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function loadTranslations(locale) {
  try {
    const localesPath = path.join(process.cwd(), 'public', 'locales', locale, 'common.json');
    const translations = JSON.parse(fs.readFileSync(localesPath, 'utf8'));
    return translations.contact;
  } catch (error) {
    console.error(`Error loading translations for locale ${locale}:`, error);
    // Fallback to English
    const localesPath = path.join(process.cwd(), 'public', 'locales', 'en', 'common.json');
    const translations = JSON.parse(fs.readFileSync(localesPath, 'utf8'));
    return translations.contact;
  }
}

export default async function handler(req, res) {
  console.log('=== API /api/contact –≤—ã–∑–≤–∞–Ω ===');
  console.log('Method:', req.method);
  
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  const { name, phone, email, consultationType, message, locale = 'en' } = req.body;
  
  console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', { name, phone, email, consultationType, locale });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
  let t;
  try {
    t = loadTranslations(locale);
    console.log('–ü–µ—Ä–µ–≤–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —è–∑—ã–∫–∞:', locale);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', error);
    return res.status(500).json({ 
      error: 'Translation loading error',
      details: error.message
    });
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  if (!name || !phone || !email || !consultationType) {
    console.log('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –Ω–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
    return res.status(400).json({ error: 'Missing required fields' });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const envCheck = {
    SMTP_HOST: !!process.env.SMTP_HOST,
    SMTP_PORT: !!process.env.SMTP_PORT,
    EMAIL_USER: !!process.env.EMAIL_USER,
    EMAIL_PASS: !!process.env.EMAIL_PASS,
    ADMIN_EMAIL: !!process.env.ADMIN_EMAIL
  };
  
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:', envCheck);

  // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú EMAIL –¥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å nodemailer
  const emailEnabled = false; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
  
  console.warn('‚ö†Ô∏è Email –æ—Ç–ø—Ä–∞–≤–∫–∞ –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê (–ø—Ä–æ–±–ª–µ–º–∞ —Å nodemailer –≤ Next.js)');

  try {
    console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:');
    console.log({
      –ò–º—è: name,
      –¢–µ–ª–µ—Ñ–æ–Ω: phone,
      Email: email,
      '–¢–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏': consultationType,
      –°–æ–æ–±—â–µ–Ω–∏–µ: message || '(–Ω–µ—Ç)',
      –Ø–∑—ã–∫: locale
    });
    
    // –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª
    
    console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (–¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã)');
    res.status(200).json({ 
      success: true, 
      message: 'Form submitted successfully (email temporarily disabled)',
      emailSent: false,
      note: 'Data logged to server console'
    });

  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã:', error);
    console.error('Stack trace:', error.stack);
    res.status(500).json({ 
      error: 'Error submitting form',
      details: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
function createTransporter() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º require –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –≤ Next.js API routes
  const nodemailer = require('nodemailer');
  
  console.log('nodemailer –æ–±—ä–µ–∫—Ç:', Object.keys(nodemailer));
  console.log('nodemailer.default?', typeof nodemailer.default);
  console.log('nodemailer.createTransporter?', typeof nodemailer.createTransporter);
  
  // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–∞
  const mailer = nodemailer.default || nodemailer;
  
  if (typeof mailer.createTransporter !== 'function') {
    throw new Error(`createTransporter –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã: ${Object.keys(mailer).join(', ')}`);
  }
  
  return mailer.createTransporter({
    host: process.env.SMTP_HOST,
    port: parseInt(process.env.SMTP_PORT),
    secure: true,
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS
    }
  });
}

// 1. –û—Ç–ø—Ä–∞–≤–∫–∞ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async function sendEmailToAdmin(data) {
  const transporter = createTransporter();
  const { t } = data;

  const consultationTypeLabels = {
    'in-person': t.inPersonConsultation,
    'online': t.onlineConsultation,
    'second-opinion': t.secondOpinion
  };

  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: process.env.ADMIN_EMAIL,
    replyTo: data.email,
    subject: `üè• ${t.email.adminSubject} ${data.name}`,
    html: `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #1d1d6d; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .content { background: #f9f9f9; padding: 30px; border: 1px solid #ddd; }
          .field { margin-bottom: 15px; padding: 12px; background: white; border-left: 4px solid #1d1d6d; }
          .label { font-weight: bold; color: #1d1d6d; margin-bottom: 5px; }
          .value { color: #333; font-size: 16px; }
          .footer { background: #f0f0f0; padding: 15px; text-align: center; font-size: 12px; color: #666; border-radius: 0 0 8px 8px; }
          .urgent { background: #fff3cd; border-left-color: #E57900; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1 style="margin: 0;">üì© ${t.email.adminTitle}</h1>
            <p style="margin: 10px 0 0 0;">${t.email.clinicName}</p>
          </div>
          
          <div class="content">
            <div class="field urgent">
              <div class="label">üîî ${t.email.consultationType}:</div>
              <div class="value">${consultationTypeLabels[data.consultationType] || data.consultationType}</div>
            </div>

            <div class="field">
              <div class="label">üë§ ${t.email.patientName}:</div>
              <div class="value">${data.name}</div>
            </div>

            <div class="field">
              <div class="label">üì± ${t.phone}:</div>
              <div class="value"><a href="tel:${data.phone}">${data.phone}</a></div>
            </div>

            <div class="field">
              <div class="label">üìß ${t.email}:</div>
              <div class="value"><a href="mailto:${data.email}">${data.email}</a></div>
            </div>

            ${data.message ? `
            <div class="field">
              <div class="label">üí¨ ${t.message}:</div>
              <div class="value">${data.message}</div>
            </div>
            ` : ''}
          </div>

          <div class="footer">
            <p>${t.email.sentTime}: ${new Date().toLocaleString(data.locale, { timeZone: 'Asia/Jerusalem' })}</p>
            <p>${t.email.addressValue} | <a href="https://www.drtunitski.com">www.drtunitski.com</a></p>
          </div>
        </div>
      </body>
      </html>
    `
  };

  await transporter.sendMail(mailOptions);
}

// 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç—É
async function sendConfirmationToPatient(data) {
  const transporter = createTransporter();
  const { t } = data;

  const consultationTypeLabels = {
    'in-person': t.inPersonConsultation,
    'online': t.onlineConsultation,
    'second-opinion': t.secondOpinion
  };

  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: data.email,
    subject: `‚úÖ ${t.email.patientSubject}`,
    html: `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: linear-gradient(135deg, #1d1d6d 0%, #4a4a9f 100%); color: white; padding: 30px 20px; text-align: center; border-radius: 8px 8px 0 0; }
          .logo { font-size: 24px; font-weight: bold; margin-bottom: 10px; }
          .content { background: white; padding: 30px; border: 1px solid #ddd; }
          .success-icon { font-size: 48px; text-align: center; margin: 20px 0; }
          .message { background: #f0f8ff; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #1d1d6d; }
          .info-box { background: #fff9f0; padding: 15px; border-radius: 8px; margin: 15px 0; }
          .contact-info { background: #f9f9f9; padding: 20px; border-radius: 8px; margin-top: 20px; }
          .contact-item { margin: 10px 0; }
          .footer { background: #f0f0f0; padding: 20px; text-align: center; font-size: 12px; color: #666; border-radius: 0 0 8px 8px; }
          .btn { display: inline-block; padding: 12px 30px; background: #E57900; color: white; text-decoration: none; border-radius: 5px; margin: 15px 0; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="logo">üè• Dr. Serge Tunitski</div>
            <p style="margin: 0; font-size: 16px;">${t.email.tagline}</p>
          </div>
          
          <div class="content">
            <div class="success-icon">‚úÖ</div>
            
            <h2 style="color: #1d1d6d; text-align: center;">${t.email.thankYou}</h2>
            
            <p>${t.email.dear} <strong>${data.name}</strong>,</p>
            
            <div class="message">
              <p style="margin: 0;"><strong>${t.email.requestReceived}</strong></p>
              <p style="margin: 10px 0 0 0;">${t.email.contactSoon}</p>
            </div>

            <div class="info-box">
              <p style="margin: 0 0 10px 0;"><strong>${t.email.requestDetails}</strong></p>
              <p style="margin: 5px 0;">üìã <strong>${t.email.consultationType}:</strong> ${consultationTypeLabels[data.consultationType] || data.consultationType}</p>
              <p style="margin: 5px 0;">üìß <strong>${t.email} ${t.email.forContact}:</strong> ${data.email}</p>
            </div>

            <p><strong>${t.email.whatNext}</strong></p>
            <ol style="padding-left: 20px;">
              <li>${t.email.step1}</li>
              <li>${t.email.step2}</li>
              <li>${t.email.step3}</li>
            </ol>

            <div class="contact-info">
              <p style="margin: 0 0 15px 0; font-weight: bold; color: #1d1d6d;">üìû ${t.email.clinicContacts}</p>
              <div class="contact-item">
                <strong>${t.email.address}:</strong> ${t.email.addressValue}
              </div>
              <div class="contact-item">
                <strong>${t.phone}:</strong> <a href="tel:+972507377870">+972 50-737-7870</a>
              </div>
              <div class="contact-item">
                <strong>${t.email}:</strong> <a href="mailto:${process.env.ADMIN_EMAIL}">${process.env.ADMIN_EMAIL}</a>
              </div>
              <div class="contact-item">
                <strong>Website:</strong> <a href="https://www.drtunitski.com">www.drtunitski.com</a>
              </div>
            </div>

            <div style="text-align: center; margin-top: 30px;">
              <a href="https://www.drtunitski.com" class="btn">${t.email.returnToSite || 'Back to site'}</a>
            </div>

            <p style="margin-top: 30px; font-size: 14px; color: #666;">
              <em>${t.email.urgentQuestions}</em>
            </p>
          </div>

          <div class="footer">
            <p style="margin: 5px 0;"><strong>${t.email.clinicName}</strong></p>
            <p style="margin: 5px 0;">${t.email.tagline}</p>
            <p style="margin: 5px 0;">${t.email.addressValue}</p>
            <p style="margin: 15px 0 5px 0; font-size: 10px;">
              ${t.email.autoMessage}<br>
              ${process.env.ADMIN_EMAIL}
            </p>
          </div>
        </div>
      </body>
      </html>
    `
  };

  await transporter.sendMail(mailOptions);
}

// 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
async function sendToTelegram(data) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;

  if (!botToken || !chatId) {
    console.log('Telegram not configured, skipping...');
    return;
  }

  const { t } = data;

  const consultationTypeLabels = {
    'in-person': t.inPersonConsultation,
    'online': t.onlineConsultation,
    'second-opinion': t.secondOpinion
  };

  const message = `
üè• <b>${t.email.adminTitle}</b>

üë§ <b>${t.email.patientName}:</b> ${data.name}
üì± <b>${t.phone}:</b> ${data.phone}
üìß <b>${t.email}:</b> ${data.email}
üîî <b>${t.email.consultationType}:</b> ${consultationTypeLabels[data.consultationType] || data.consultationType}
${data.message ? `üí¨ <b>${t.message}:</b> ${data.message}` : ''}

üïê <b>${t.email.sentTime}:</b> ${new Date().toLocaleString(data.locale, { timeZone: 'Asia/Jerusalem' })}
üåê <b>Language:</b> ${data.locale.toUpperCase()}

<i>${t.email.clinicName}</i>
  `.trim();

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      })
    });

    if (!response.ok) {
      throw new Error('Telegram API error');
    }
  } catch (error) {
    console.error('Error sending to Telegram:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  }
}

