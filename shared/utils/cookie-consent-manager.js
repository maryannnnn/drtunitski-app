import { supabase } from '../../app/config/supabase-client';
import { getUserFingerprint } from './user-fingerprint';

const STORAGE_KEY = 'cookie-consent';
const STORAGE_VERSION = '1.0';

/**
 * Cookie Consent Manager
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–≥–ª–∞—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ cookies
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Supabase –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç localStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
 */
export class CookieConsentManager {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getConsent() {
    if (typeof window === 'undefined') return null;

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage (–±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø)
      const cached = localStorage.getItem(STORAGE_KEY);
      if (cached) {
        try {
          const parsed = JSON.parse(cached);
          if (parsed.version === STORAGE_VERSION) {
            return parsed.consent;
          }
        } catch (parseError) {
          console.error('Error parsing cached consent:', parseError);
          localStorage.removeItem(STORAGE_KEY);
        }
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–µ—à–µ –∏ –µ—Å—Ç—å Supabase, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã
      if (supabase) {
        const fingerprint = await getUserFingerprint();
        if (!fingerprint) return null;

        const { data, error } = await supabase
          .from('cookie_consents')
          .select('*')
          .eq('user_fingerprint', fingerprint)
          .single();

        if (error) {
          // PGRST116 = not found, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (error.code !== 'PGRST116') {
            console.error('Error fetching consent from Supabase:', error);
          }
          return null;
        }

        if (data) {
          const consent = {
            essential: data.essential,
            analytics: data.analytics,
            marketing: data.marketing,
          };

          // –ö–µ—à–∏—Ä—É–µ–º –≤ localStorage
          this.cacheConsent(consent);
          return consent;
        }
      }

      return null;
    } catch (error) {
      console.error('Error getting consent:', error);
      return null;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async saveConsent(consent) {
    if (typeof window === 'undefined') return false;

    try {
      const normalizedConsent = {
        essential: consent.essential ?? true,
        analytics: consent.analytics ?? false,
        marketing: consent.marketing ?? false,
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (supabase) {
        const fingerprint = await getUserFingerprint();
        if (fingerprint) {
          const { error } = await supabase
            .from('cookie_consents')
            .upsert({
              user_fingerprint: fingerprint,
              essential: normalizedConsent.essential,
              analytics: normalizedConsent.analytics,
              marketing: normalizedConsent.marketing,
              updated_at: new Date().toISOString(),
            }, {
              onConflict: 'user_fingerprint'
            });

          if (error) {
            console.error('Error saving consent to Supabase:', error);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å localStorage –¥–∞–∂–µ –µ—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
          }
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º localStorage
      this.cacheConsent(normalizedConsent);

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cookies
      this.applyCookieSettings(normalizedConsent);

      return true;
    } catch (error) {
      console.error('Error saving consent:', error);
      return false;
    }
  }

  /**
   * –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è –≤ localStorage
   */
  static cacheConsent(consent) {
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify({
        version: STORAGE_VERSION,
        consent,
        timestamp: Date.now(),
      }));
    } catch (error) {
      console.error('Error caching consent:', error);
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cookies
   */
  static applyCookieSettings(consent) {
    if (typeof window === 'undefined') return;

    try {
      if (consent.analytics) {
        this.loadAnalytics();
      } else {
        this.removeAnalytics();
      }

      if (consent.marketing) {
        this.loadMarketing();
      } else {
        this.removeMarketing();
      }

      // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      window.dispatchEvent(new CustomEvent('cookieConsentChanged', { 
        detail: consent 
      }));
    } catch (error) {
      console.error('Error applying cookie settings:', error);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  static loadAnalytics() {
    if (typeof window === 'undefined') return;

    // Google Analytics
    const gaId = process.env.NEXT_PUBLIC_GA_ID;
    if (gaId && !window.gtag) {
      const script = document.createElement('script');
      script.async = true;
      script.src = `https://www.googletagmanager.com/gtag/js?id=${gaId}`;
      document.head.appendChild(script);

      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      window.gtag = gtag;
      gtag('js', new Date());
      gtag('config', gaId, {
        anonymize_ip: true,
        cookie_flags: 'SameSite=None;Secure'
      });

      console.log('‚úÖ Analytics loaded');
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å cookies –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  static removeAnalytics() {
    if (typeof window === 'undefined') return;

    // –£–¥–∞–ª—è–µ–º Google Analytics cookies
    const gaCookies = ['_ga', '_gat', '_gid'];
    gaCookies.forEach(name => {
      document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=${window.location.hostname}`;
      document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
    });

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ _ga* cookies
    const allCookies = document.cookie.split(';');
    allCookies.forEach(cookie => {
      const name = cookie.split('=')[0].trim();
      if (name.startsWith('_ga')) {
        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=${window.location.hostname}`;
        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
      }
    });

    console.log('üö´ Analytics removed');
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
   */
  static loadMarketing() {
    if (typeof window === 'undefined') return;

    // Facebook Pixel
    const fbPixelId = process.env.NEXT_PUBLIC_FB_PIXEL_ID;
    if (fbPixelId && !window.fbq) {
      !function(f,b,e,v,n,t,s)
      {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
      n.callMethod.apply(n,arguments):n.queue.push(arguments)};
      if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
      n.queue=[];t=b.createElement(e);t.async=!0;
      t.src=v;s=b.getElementsByTagName(e)[0];
      s.parentNode.insertBefore(t,s)}(window, document,'script',
      'https://connect.facebook.net/en_US/fbevents.js');
      fbq('init', fbPixelId);
      fbq('track', 'PageView');

      console.log('‚úÖ Marketing loaded');
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ cookies
   */
  static removeMarketing() {
    if (typeof window === 'undefined') return;

    // –£–¥–∞–ª—è–µ–º Facebook cookies
    const fbCookies = ['_fbp', '_fbc'];
    fbCookies.forEach(name => {
      document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=${window.location.hostname}`;
      document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
    });

    console.log('üö´ Marketing removed');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ
   */
  static async hasConsent() {
    const consent = await this.getConsent();
    return consent !== null;
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–≥–ª–∞—Å–∏–∏
   */
  static async clearConsent() {
    if (typeof window === 'undefined') return;

    try {
      localStorage.removeItem(STORAGE_KEY);

      if (supabase) {
        const fingerprint = await getUserFingerprint();
        if (fingerprint) {
          await supabase
            .from('cookie_consents')
            .delete()
            .eq('user_fingerprint', fingerprint);
        }
      }

      this.removeAnalytics();
      this.removeMarketing();
    } catch (error) {
      console.error('Error clearing consent:', error);
    }
  }
}

